####################### modules imports ############################
import demand as dem
import customGraph
import graphFunctions as gf

######################### functions ################################
# returns a d_list with d_params [source, target, bw, lat]
def build_d_list(G,d_params):
	d_list=[]
	for d in d_params:
		# initialize demand
		temp_dem = dem.demand(G.nodes(),88,88)
		# set fields
		temp_dem.make_choice_concrete(d[0],d[1],d[2],d[3])
		# add to list
		d_list.append(temp_dem)
	return d_list

# prints a list of random demands [source, target, bw, lat]
def build_d_params(number_of_demands, G, bw_lowest, bw_highest, lat_lowest, lat_highest):
	path_selection_criterion = 'hops'
	d_list=[]
	for k in range(number_of_demands):
		while(True):
			print 'Create demand Nr. '+str(k)
			# initialize demand
			temp_dem = dem.demand(G.nodes(),88,88)
			# make random choice
			#temp_dem.make_random_choice()
			temp_dem.make_total_random_choice(bw_lowest, bw_highest, lat_lowest, lat_highest)
			# check feasibility
			if gf.is_feasible(G,temp_dem,path_selection_criterion):
				d_list.append(temp_dem)
				break
	for d in d_list:
		print '['+str(d.source)+','+str(d.target)+','+str(d.bw)+','+str(d.lat)+']'+','+'\\'

# runs build_d_params for graph_typ and n demands
def run_build(graph_type,number_of_demands):
	G			=	customGraph.make(graph_type)
	bw_lowest		=	gf.minimum_bw(G)
	bw_highest		=	gf.maximum_bw(G)
	lat_lowest		=	gf.minimum_lat(G)*10
	lat_highest		=	gf.maximum_lat(G)*100
	build_d_params(number_of_demands, G, bw_lowest, bw_highest, lat_lowest, lat_highest)

########################## build data ###############################

#run_build('srg',15)
#run_build('srg_multiple',50)
#run_build('srg_multiple8',200)


##################### data out of build #############################

def get_std_d_list(graph_type):
	d_params_srg=[\
	[6,2,8.29221446513,65.7834691962],\
	[4,2,6.01901435229,177.951162664],\
	[2,4,8.84723301878,95.1377893186],\
	[16,4,13.1140795065,70.6748229498],\
	[6,2,13.246727625,55.9361252412],\
	[6,3,12.7800538138,98.5313248055],\
	[16,2,11.6138911825,162.627359859],\
	[4,3,6.48471978893,159.777507539],\
	[16,2,11.3011846929,107.655937609],\
	[3,2,12.8492335435,122.003454927],\
	[3,16,5.87814920034,177.57822566],\
	[4,16,13.2379293068,22.4956931629],\
	[2,16,5.26350258858,5.6304064309],\
	[16,6,9.76385640111,135.213284538],\
	[2,3,13.7785166894,80.1619045641]]

	d_params_srg_multiple=[\
	[274,288,6.25609563163,54.8997570784],\
	[170,330,5.52749109725,71.9302899754],\
	[162,138,11.3205171264,150.410968586],\
	[149,110,10.7923356722,28.076263011],\
	[325,276,8.97425806788,43.1811296486],\
	[170,318,5.13514045664,89.488450494],\
	[275,183,13.3835389085,76.3119397374],\
	[148,1,7.69044974185,87.5087569465],\
	[246,234,6.80515402572,164.185324249],\
	[89,87,11.927734889,30.7313138537],\
	[199,180,13.5291620774,17.2170068184],\
	[21,45,8.56717573156,86.9098446577],\
	[131,128,5.25665635072,90.1374285747],\
	[325,274,11.0028334834,53.2331813518],\
	[226,173,6.21939911779,37.1113834482],\
	[296,309,13.3124661516,124.387333983],\
	[320,288,5.40874027456,28.6674245695],\
	[267,310,13.6367158286,26.0714748278],\
	[66,65,8.82409636431,100.081380182],\
	[170,330,12.8334018839,128.900646846],\
	[169,274,12.804398673,178.109768932],\
	[106,3,10.0884765047,23.6214811196],\
	[36,23,12.4791021575,155.520431135],\
	[173,202,7.04512512612,177.864049923],\
	[3,107,14.0131302339,154.743912999],\
	[308,218,10.635755691,148.151586272],\
	[170,317,9.05900627036,79.688820709],\
	[5,58,8.1165458133,83.2169349519],\
	[138,157,14.808862755,123.738466773],\
	[275,170,6.36681945788,139.871800804],\
	[47,45,9.72344288069,167.540697944],\
	[43,21,5.6235690593,134.717705869],\
	[288,306,11.9795997111,12.0839992154],\
	[26,54,11.5806318847,148.574300331],\
	[78,64,7.57303086555,125.194041119],\
	[191,194,13.8659108313,176.909605671],\
	[320,169,12.1906471131,30.9455172469],\
	[24,22,11.7223164499,111.17196094],\
	[216,251,12.1253110473,169.508662189],\
	[43,45,7.75825731285,32.4471638481],\
	[328,309,12.9704029511,126.618613672],\
	[121,98,13.7495844662,68.3072140919],\
	[275,330,14.4679405671,73.996991727],\
	[47,57,5.92483774855,176.723896891],\
	[309,299,7.39328865786,118.513027682],\
	[316,202,11.9946266695,21.693325424],\
	[320,306,10.4993674228,37.7509811811],\
	[316,288,8.4045978571,97.8206348072],\
	[106,5,7.8575364661,131.749556486],\
	[108,5,11.2385349201,46.3472002127]]

	d_params_srg_multiple5=[\
	[50,106,8.47949765131,459.35288696],\
	[171,213,5.32396748646,119.323011796],\
	[422,494,14.8957936538,320.287638681],\
	[362,358,6.03125892448,336.516554421],\
	[506,536,11.3600381235,529.649481749],\
	[274,148,5.96214797653,107.24800763],\
	[57,1,13.5802140276,616.759324061],\
	[279,209,9.16666383493,314.135235077],\
	[169,183,6.17122740039,21.9456503907],\
	[238,212,5.24146867141,61.9751482099],\
	[506,548,12.7548203811,66.436511571],\
	[498,614,13.6043214203,240.5807798],\
	[393,338,14.4885992215,152.322193807],\
	[406,379,9.58164935319,443.162004864],\
	[323,295,7.24870712863,453.291356681],\
	[504,553,12.348505451,373.730844157],\
	[407,406,8.33256188343,183.442357223],\
	[32,2,13.8067412198,574.009209908],\
	[476,554,8.97430592589,37.0234035716],\
	[658,645,13.1342627514,161.742995874],\
	[547,507,13.3782469873,366.305969883],\
	[633,620,5.52065914603,518.138167833],\
	[1,47,7.86331712481,295.366880355],\
	[465,449,13.5633156474,167.768268735],\
	[254,323,6.91793644857,251.154254927],\
	[28,2,10.9652007377,235.218179495],\
	[120,156,7.39115721381,456.70911327],\
	[232,236,12.4226080337,10.4943197742],\
	[568,569,12.9842089102,159.954433329],\
	[47,32,5.62213948517,217.574216483],\
	[410,383,11.4113784005,503.674186794],\
	[589,616,13.6502983944,265.098091551],\
	[154,116,12.6871901503,118.008436553],\
	[421,425,8.47830134233,476.647957231],\
	[155,158,13.7699176235,333.589824537],\
	[591,593,6.60686059447,496.305650097],\
	[116,155,14.4858934233,112.981091782],\
	[15,47,11.6965678503,345.575574277],\
	[41,111,13.4219094552,119.355511546],\
	[225,239,6.73189170551,215.087483622],\
	[611,624,11.8336861908,271.761612242],\
	[589,659,7.73871909641,380.341050858],\
	[551,561,8.36726365025,521.675853915],\
	[465,477,11.0235434807,163.555758927],\
	[407,380,8.90711609221,36.7732656942],\
	[74,32,14.2085326146,343.928491219],\
	[603,617,6.65834254155,304.536264894],\
	[317,330,7.32356286646,292.918949744],\
	[211,170,11.184606032,571.11904981],\
	[617,591,12.411330762,460.784964036],\
	[238,213,10.8158318657,34.9815394656],\
	[582,572,11.734135503,579.667134829],\
	[197,196,7.8001260531,343.4018187],\
	[281,326,10.1586788608,179.608946044],\
	[322,253,14.6155337433,140.453190643],\
	[32,1,10.9373398046,257.81913364],\
	[645,591,14.9772933913,128.350803569],\
	[633,659,10.3065365707,174.920169952],\
	[85,116,9.45072090611,250.537709752],\
	[339,380,9.38009588856,479.517242495],\
	[267,280,8.22095362492,155.642100577],\
	[341,407,14.3717844562,620.062809758],\
	[494,425,6.68292842466,66.0380536494],\
	[112,128,13.3470441573,564.063229787],\
	[506,505,13.9848907615,347.259238187],\
	[551,548,13.8425872677,382.058908635],\
	[86,128,13.9121611182,358.085982054],\
	[492,442,9.5171170902,578.595891531],\
	[1,44,8.76481822807,418.371041487],\
	[70,57,9.56237688484,41.5773162499],\
	[536,548,9.64620922258,616.922297505],\
	[506,438,8.21158954679,170.283127294],\
	[365,393,5.23621596313,385.866501032],\
	[225,213,5.87350301624,498.146911717],\
	[435,464,14.8796290125,37.0157810343],\
	[381,380,12.8491483787,596.09811384],\
	[318,320,12.1813489143,464.444427679],\
	[448,490,14.3066217001,170.787540844],\
	[533,575,8.90112871852,386.945027252],\
	[240,194,9.10964227547,473.240414883],\
	[589,620,12.1570538317,570.726594193],\
	[338,351,8.40788985621,521.342182595],\
	[171,196,11.8090827034,412.289604096],\
	[155,89,7.82112572515,90.9450065751],\
	[2,74,5.49141472843,70.8209057314],\
	[645,631,14.230690516,508.426587958],\
	[109,35,6.3702345628,160.13747809],\
	[322,297,14.8382981119,357.721837381],\
	[406,368,6.52640299251,240.909416513],\
	[381,368,6.41021045088,594.729257587],\
	[101,115,10.3202330979,387.638076837],\
	[108,107,13.368201013,360.860959749],\
	[238,200,10.9836327033,595.666354121],\
	[257,309,14.3537379489,390.634586639],\
	[322,296,12.515240744,84.7282438728],\
	[236,233,10.8323214671,319.870532096],\
	[196,238,7.47074687247,32.8045328536],\
	[532,506,12.8546465073,42.0717182208],\
	[498,455,6.99658943726,501.532927996],\
	[463,491,12.9992554273,349.913707677]]


	if graph_type=='srg':
		G = customGraph.make('srg')
		return [G,build_d_list(G,d_params_srg)]
	elif graph_type=='srg_multiple':
		G = customGraph.make('srg_multiple')
		return [G,build_d_list(G,d_params_srg_multiple)]
	else:
		print 'invalid graph_type'


def get_rnd_d_list(graph_type, number_of_demands):
	G = customGraph.make(graph_type)

	bw_lowest		=	gf.minimum_bw(G)
	bw_highest		=	gf.maximum_bw(G)
	lat_lowest		=	gf.minimum_lat(G)
	lat_highest		=	gf.maximum_lat(G)*30

	path_selection_criterion = 'hops'
	d_list=[]
	for k in range(number_of_demands):
		while(True):
			print 'Create demand Nr. '+str(k)
			# initialize demand
			temp_dem = dem.demand(G.nodes(),88,88)
			# make random choice
			#temp_dem.make_random_choice()
			temp_dem.make_total_random_choice(bw_lowest, bw_highest, lat_lowest, lat_highest)
			# check feasibility
			if gf.is_feasible(G,temp_dem,path_selection_criterion):
				d_list.append(temp_dem)
				break
		# 4Debug: print demands
		print 'demand '+str(k)+': '+str(d_list[k].source)+' ==> '+str(d_list[k].target)

	return [G, d_list]

