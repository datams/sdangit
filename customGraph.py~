import networkx as nx
import random


def make(name):
	if name=='eight':
		G=nx.Graph()

		# add nodes and edges to the graph
		G.add_edge(0,1, bw=3, lat=1)
		G.add_edge(0,2, bw=3, lat=1)
		G.add_edge(1,3, bw=3, lat=1)
		G.add_edge(2,3, bw=3, lat=1)
		G.add_edge(3,4, bw=3, lat=1)
		G.add_edge(3,5, bw=3, lat=1)
		G.add_edge(4,6, bw=3, lat=1)
		G.add_edge(5,6, bw=3, lat=1)
		G = G.to_directed()
		return G

	elif name=='double_eight':
		G=nx.Graph()

		# add nodes and edges to the graph
		G.add_edge(0,1, bw=3, lat=1)
		G.add_edge(0,2, bw=3, lat=1)
		G.add_edge(1,3, bw=3, lat=1)
		G.add_edge(2,3, bw=3, lat=1)
		G.add_edge(3,4, bw=3, lat=1)
		G.add_edge(3,5, bw=3, lat=1)
		G.add_edge(4,6, bw=3, lat=1)
		G.add_edge(5,6, bw=3, lat=1)
		F= nx.disjoint_union(G,G)
		F.add_edge(0,7, bw=3, lat=1)
		F = F.to_directed()
		return F

	elif name=='deight':
		G=nx.Graph()

		# add nodes and edges to the graph
		G.add_edge(0,1, bw=4, lat=1)
		G.add_edge(0,2, bw=4, lat=1)
		G.add_edge(1,3, bw=8, lat=1)
		G.add_edge(2,3, bw=4, lat=1)
		G.add_edge(3,4, bw=4, lat=1)
		G.add_edge(3,5, bw=10, lat=1)
		G.add_edge(4,6, bw=4, lat=1)
		G.add_edge(5,6, bw=4, lat=1)
		G.add_edge(1,4, bw=4, lat=1)
		G = G.to_directed()
		return G

	elif name=='diamond':
		G=nx.Graph()

		# add nodes and edges to the graph
		G.add_edge(0,1, bw=1, lat=1)
		G.add_edge(0,2, bw=1, lat=1)
		G.add_edge(2,3, bw=1, lat=1)
		G.add_edge(1,3, bw=1, lat=1)
		G = G.to_directed()
		return G

	elif name=='richer1':
		G=nx.Graph()
		# add nodes and edges to the graph
		G.add_edge(0, 1, bw=1, lat=5)
		G.add_edge(0, 2, bw=1, lat=5)
		G.add_edge(2, 13, bw=1, lat=2)
		G.add_edge(13, 14, bw=1, lat=4)
		G.add_edge(14, 12, bw=1, lat=8)
		G.add_edge(12, 3, bw=1, lat=4)
		G.add_edge(3, 2, bw=1, lat=3)
		G.add_edge(3, 1, bw=1, lat=10)
		G.add_edge(1, 4, bw=1, lat=10)
		G.add_edge(1, 10, bw=1, lat=8)
		G.add_edge(10, 11, bw=1, lat=2)
		G.add_edge(11, 8, bw=1, lat=3)
		G.add_edge(8, 4, bw=1, lat=5)
		G.add_edge(4, 3, bw=1, lat=11)
		G.add_edge(4, 6, bw=1, lat=4)
		G.add_edge(8, 9, bw=1, lat=5)
		G.add_edge(9, 7, bw=1, lat=10)
		G.add_edge(6, 7, bw=1, lat=6)
		G.add_edge(6, 5, bw=1, lat=4)
		G.add_edge(7, 5, bw=1, lat=7)
		G.add_edge(7, 12, bw=1, lat=14)
		G.add_edge(5, 3, bw=1, lat=5)
		G = G.to_directed()
		return G
	
	elif name=='srg':
		G=nx.Graph()

		# add nodes and edges to the graph
		# bw: line thickness
		# latency unit: 10e-4 seconds (geo distance / light)
		G.add_edge(1,2, bw=5, lat=2.515)
		G.add_edge(1,4, bw=5, lat=4.591)
		G.add_edge(1,9, bw=5, lat=1.317)
		G.add_edge(2,11, bw=5, lat=2.076)
		G.add_edge(2,10, bw=5, lat=0.897)
		G.add_edge(2,7, bw=5, lat=3.162)
		G.add_edge(2,15, bw=5, lat=1.333)
		G.add_edge(2,3, bw=15, lat=3.207)
		G.add_edge(2,6, bw=15, lat=5.182)
		G.add_edge(3,12, bw=5, lat=1.033)
		G.add_edge(3,16, bw=15, lat=0.922)
		G.add_edge(4,16, bw=15, lat=1.708)
		G.add_edge(8,14, bw=5, lat=1.69)
		G.add_edge(14,5, bw=5, lat=3.574)
		G.add_edge(13,4, bw=5, lat=2.819)
		G.add_edge(4,5, bw=5, lat=1.685)
		G.add_edge(4,6, bw=15, lat=6.258)
		G.add_edge(5,17, bw=5, lat=4.303)
		G.add_edge(17,2, bw=5, lat=3.236)
		G.add_edge(5,19, bw=5, lat=3.102)
		G.add_edge(5,18, bw=5, lat=2.368)
		G.add_edge(19,20, bw=5, lat=1.634)
		G.add_edge(20,6, bw=5, lat=2.702)
		G.add_edge(6,21, bw=5, lat=0.733)
		G.add_edge(6,7, bw=5, lat=3.496)
		G.add_edge(6,11, bw=5, lat=5.41)
		G.add_edge(6,15, bw=5, lat=3.866)
		G = G.to_directed()

		node2city={1: 'Basel', 2: 'Zurich', 3: 'Bern', 4: 'Lausanne', 5: 'Genf', 6: 'Lugano',\
		7: 'Chur', 8: 'Delemont', 9: 'Aarau', 10: 'Rapperswil', 11: 'St. Gallen', 12: 'Solothurn',\
		 13: 'Biel', 14: 'Neuenburg', 15: 'Luzern', 16: 'Friburg', 17: 'Thun', 18: 'Martigny', 19: 'Sion', 20: 'Brig', 21: 'Locarno'}

		return G

	elif name=='srg_multiple':
		G=nx.Graph()

		# add nodes and edges to the graph
		# bw: line thickness
		# latency unit: 10e-4 seconds (geo distance / light)
		G.add_edge(1,2, bw=5, lat=2.515)
		G.add_edge(1,4, bw=5, lat=4.591)
		G.add_edge(1,9, bw=5, lat=1.317)
		G.add_edge(2,11, bw=5, lat=2.076)
		G.add_edge(2,10, bw=5, lat=0.897)
		G.add_edge(2,7, bw=5, lat=3.162)
		G.add_edge(2,15, bw=5, lat=1.333)
		G.add_edge(2,3, bw=15, lat=3.207)
		G.add_edge(2,6, bw=15, lat=5.182)
		G.add_edge(3,12, bw=5, lat=1.033)
		G.add_edge(3,16, bw=15, lat=0.922)
		G.add_edge(4,16, bw=15, lat=1.708)
		G.add_edge(8,14, bw=5, lat=1.69)
		G.add_edge(14,5, bw=5, lat=3.574)
		G.add_edge(13,4, bw=5, lat=2.819)
		G.add_edge(4,5, bw=5, lat=1.685)
		G.add_edge(4,6, bw=15, lat=6.258)
		G.add_edge(5,17, bw=5, lat=4.303)
		G.add_edge(17,2, bw=5, lat=3.236)
		G.add_edge(5,19, bw=5, lat=3.102)
		G.add_edge(5,18, bw=5, lat=2.368)
		G.add_edge(19,20, bw=5, lat=1.634)
		G.add_edge(20,6, bw=5, lat=2.702)
		G.add_edge(6,21, bw=5, lat=0.733)
		G.add_edge(6,7, bw=5, lat=3.496)
		G.add_edge(6,11, bw=5, lat=5.41)
		G.add_edge(6,15, bw=5, lat=3.866)

		'''
		intercon=''
		for r in range(4):	
			old_nodes=G.nodes()			
			G= nx.disjoint_union(G,G)
			all_nodes=G.nodes()
			new_nodes=list(set(all_nodes) - set(old_nodes))
			for n in range(4):
				from_node=random.choice(old_nodes)
				old_nodes.remove(from_node)			
				to_node=random.choice(new_nodes)
				new_nodes.remove(to_node)
				intercon=intercon+'('+str(from_node)+', '+str(to_node)+'), '
				G.add_edge(from_node, to_node, bw=50, lat=3.866)
		print intercon
		return G
		'''

		intercon=[(5, 34), (14, 22), (7, 30), (2, 41), (38, 83),\
		(18, 61), (9, 79), (4, 81), (54, 134), (11, 149), (41, 130),\
		(56, 107), (32, 241), (26, 288), (93, 237), (152, 316)]

		for r in range(4):	
			old_nodes=G.nodes()			
			G= nx.disjoint_union(G,G)
			all_nodes=G.nodes()
			new_nodes=list(set(all_nodes) - set(old_nodes))
		for con in intercon:
			G.add_edge(con[0], con[1], bw=100, lat=10)
		G = G.to_directed()
		return G


	elif name=='srg_multiple5':
		G=nx.Graph()

		# add nodes and edges to the graph
		# bw: line thickness
		# latency unit: 10e-4 seconds (geo distance / light)
		G.add_edge(1,2, bw=5, lat=2.515)
		G.add_edge(1,4, bw=5, lat=4.591)
		G.add_edge(1,9, bw=5, lat=1.317)
		G.add_edge(2,11, bw=5, lat=2.076)
		G.add_edge(2,10, bw=5, lat=0.897)
		G.add_edge(2,7, bw=5, lat=3.162)
		G.add_edge(2,15, bw=5, lat=1.333)
		G.add_edge(2,3, bw=15, lat=3.207)
		G.add_edge(2,6, bw=15, lat=5.182)
		G.add_edge(3,12, bw=5, lat=1.033)
		G.add_edge(3,16, bw=15, lat=0.922)
		G.add_edge(4,16, bw=15, lat=1.708)
		G.add_edge(8,14, bw=5, lat=1.69)
		G.add_edge(14,5, bw=5, lat=3.574)
		G.add_edge(13,4, bw=5, lat=2.819)
		G.add_edge(4,5, bw=5, lat=1.685)
		G.add_edge(4,6, bw=15, lat=6.258)
		G.add_edge(5,17, bw=5, lat=4.303)
		G.add_edge(17,2, bw=5, lat=3.236)
		G.add_edge(5,19, bw=5, lat=3.102)
		G.add_edge(5,18, bw=5, lat=2.368)
		G.add_edge(19,20, bw=5, lat=1.634)
		G.add_edge(20,6, bw=5, lat=2.702)
		G.add_edge(6,21, bw=5, lat=0.733)
		G.add_edge(6,7, bw=5, lat=3.496)
		G.add_edge(6,11, bw=5, lat=5.41)
		G.add_edge(6,15, bw=5, lat=3.866)
		

		'''		
		intercon=''
		for r in range(5):	
			old_nodes=G.nodes()			
			G= nx.disjoint_union(G,G)
			all_nodes=G.nodes()
			new_nodes=list(set(all_nodes) - set(old_nodes))
			for i in range(5):
				from_node=random.choice(old_nodes)
				old_nodes.remove(from_node)			
				to_node=random.choice(new_nodes)
				new_nodes.remove(to_node)
				intercon=intercon+'('+str(from_node)+', '+str(to_node)+'), '
				G.add_edge(from_node, to_node, bw=50, lat=3.866)
		print intercon
		'''

		intercon=[(18, 0), (16, 40), (9, 37), (13, 36), (14, 38), (22, 70), (12, 52),\
		(5, 73), (21, 53), (39, 54), (28, 116), (75, 91), (10, 140), (59, 106), (83, 112),\
		(102, 181), (57, 305), (42, 288), (73, 257), (2, 256), (11, 534), (155, 395), (3, 653), (189, 659), (55, 339)]

		for r in range(5):	
			old_nodes=G.nodes()			
			G= nx.disjoint_union(G,G)
			all_nodes=G.nodes()
			new_nodes=list(set(all_nodes) - set(old_nodes))
		for con in intercon:
			G.add_edge(con[0], con[1], bw=100, lat=10)
		G = G.to_directed()
		return G


	elif name=='switch':
		# import from gml
		G=nx.read_gml('SwitchL3_40.gml')
		# convert to directed
		G = G.to_directed()
		# set edge labels
		G = setEdgeLabels(G)
		return G

	elif name=='redbest':
		# import from gml
		G=nx.read_gml('RedBestel80.gml')
		# convert to directed
		G = G.to_directed()
		# set edge labels
		G = setEdgeLabels(G)
		return G
		
	elif name=='cogent':
		G=gml2nx('Cogentco200.gml')
		return G

	elif name=='kdl':
		# import from gml
		G=nx.read_gml('Kdl750.gml')
		# convert to directed
		G = G.to_directed()
		# set edge labels
		G = setEdgeLabels(G)
		return G

	else:
		print 'entered graph type unknown'

def gml2nx(filename):
	# import edges
	G=importEdges(filename)
	# convert to directed
	G = G.to_directed()
	# set edge labels
	G = setEdgeLabels(G)
	return G
	

# import edges from GML and build graph
def importEdges(graphtype):
	# import from gml and read edges
	GG=nx.read_gml(graphtype)
	edges2do=GG.edges()
	# build up from edges
	G=nx.Graph()
	for (u,i) in edges2do:
		G.add_edge(u,i, bw=0, lat=99999999)
	return G


# set default lat and bw
def setEdgeLabels(G):

	bw_variants = [1, 5, 10]
	lat_variants = [5, 20, 40]

	alreadySetList=[]
	for (s,t) in G.edges():
		if (s,t) not in alreadySetList:

			setbw=random.choice(bw_variants)
			setlat=random.choice(lat_variants)

			#G[s][t]={}
			G[s][t]['bw'] = setbw
			G[s][t]['lat'] = setlat
			alreadySetList.append((s,t))

			#G[t][s]={}
			G[t][s]['bw'] = setbw
			G[t][s]['lat'] = setlat
			#alreadySetList.append((t,s))
	return G



